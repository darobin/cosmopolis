var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/nanoid-dictionary/lowercase.js
var require_lowercase = __commonJS({
  "node_modules/nanoid-dictionary/lowercase.js"(exports, module) {
    module.exports = "abcdefghijklmnopqrstuvwxyz";
  }
});

// node_modules/@tauri-apps/api/chunk-FEIY7W7S.js
var d = Object.defineProperty;
var e = (c4, a2) => {
  for (var b2 in a2)
    d(c4, b2, { get: a2[b2], enumerable: true });
};

// node_modules/@tauri-apps/api/chunk-RCPA6UVN.js
var f = {};
e(f, { convertFileSrc: () => w, invoke: () => c, transformCallback: () => s });
function u() {
  return window.crypto.getRandomValues(new Uint32Array(1))[0];
}
function s(e2, r = false) {
  let n = u(), t = `_${n}`;
  return Object.defineProperty(window, t, { value: (o3) => (r && Reflect.deleteProperty(window, t), e2 == null ? void 0 : e2(o3)), writable: false, configurable: true }), n;
}
async function c(e2, r = {}) {
  return new Promise((n, t) => {
    let o3 = s((i) => {
      n(i), Reflect.deleteProperty(window, `_${a2}`);
    }, true), a2 = s((i) => {
      t(i), Reflect.deleteProperty(window, `_${o3}`);
    }, true);
    window.__TAURI_IPC__({ cmd: e2, callback: o3, error: a2, ...r });
  });
}
function w(e2, r = "asset") {
  let n = encodeURIComponent(e2);
  return navigator.userAgent.includes("Windows") ? `https://${r}.localhost/${n}` : `${r}://localhost/${n}`;
}

// node_modules/@tauri-apps/api/chunk-HNLFKTAJ.js
async function a(i) {
  return c("tauri", i);
}

// node_modules/@tauri-apps/api/chunk-3WDDWFXT.js
var W = {};
e(W, { TauriEvent: () => c2, emit: () => D, listen: () => E, once: () => _ });
async function s2(n, t) {
  return a({ __tauriModule: "Event", message: { cmd: "unlisten", event: n, eventId: t } });
}
async function m(n, t, i) {
  await a({ __tauriModule: "Event", message: { cmd: "emit", event: n, windowLabel: t, payload: i } });
}
async function o(n, t, i) {
  return a({ __tauriModule: "Event", message: { cmd: "listen", event: n, windowLabel: t, handler: s(i) } }).then((r) => async () => s2(n, r));
}
async function u2(n, t, i) {
  return o(n, t, (r) => {
    i(r), s2(n, r.id).catch(() => {
    });
  });
}
var c2 = ((e2) => (e2.WINDOW_RESIZED = "tauri://resize", e2.WINDOW_MOVED = "tauri://move", e2.WINDOW_CLOSE_REQUESTED = "tauri://close-requested", e2.WINDOW_CREATED = "tauri://window-created", e2.WINDOW_DESTROYED = "tauri://destroyed", e2.WINDOW_FOCUS = "tauri://focus", e2.WINDOW_BLUR = "tauri://blur", e2.WINDOW_SCALE_FACTOR_CHANGED = "tauri://scale-change", e2.WINDOW_THEME_CHANGED = "tauri://theme-changed", e2.WINDOW_FILE_DROP = "tauri://file-drop", e2.WINDOW_FILE_DROP_HOVER = "tauri://file-drop-hover", e2.WINDOW_FILE_DROP_CANCELLED = "tauri://file-drop-cancelled", e2.MENU = "tauri://menu", e2.CHECK_UPDATE = "tauri://update", e2.UPDATE_AVAILABLE = "tauri://update-available", e2.INSTALL_UPDATE = "tauri://update-install", e2.STATUS_UPDATE = "tauri://update-status", e2.DOWNLOAD_PROGRESS = "tauri://update-download-progress", e2))(c2 || {});
async function E(n, t) {
  return o(n, null, t);
}
async function _(n, t) {
  return u2(n, null, t);
}
async function D(n, t) {
  return m(n, void 0, t);
}

// node_modules/@tauri-apps/api/chunk-QSWLDHGO.js
var C = {};
e(C, { CloseRequestedEvent: () => y, LogicalPosition: () => c3, LogicalSize: () => m2, PhysicalPosition: () => o2, PhysicalSize: () => l, UserAttentionType: () => W2, WebviewWindow: () => s3, WebviewWindowHandle: () => u3, WindowManager: () => h, appWindow: () => b, availableMonitors: () => T, currentMonitor: () => E2, getAll: () => M, getCurrent: () => f2, primaryMonitor: () => z });
var m2 = class {
  constructor(e2, a2) {
    this.type = "Logical";
    this.width = e2, this.height = a2;
  }
};
var l = class {
  constructor(e2, a2) {
    this.type = "Physical";
    this.width = e2, this.height = a2;
  }
  toLogical(e2) {
    return new m2(this.width / e2, this.height / e2);
  }
};
var c3 = class {
  constructor(e2, a2) {
    this.type = "Logical";
    this.x = e2, this.y = a2;
  }
};
var o2 = class {
  constructor(e2, a2) {
    this.type = "Physical";
    this.x = e2, this.y = a2;
  }
  toLogical(e2) {
    return new c3(this.x / e2, this.y / e2);
  }
};
var W2 = ((a2) => (a2[a2.Critical = 1] = "Critical", a2[a2.Informational = 2] = "Informational", a2))(W2 || {});
function f2() {
  return new s3(window.__TAURI_METADATA__.__currentWindow.label, { skip: true });
}
function M() {
  return window.__TAURI_METADATA__.__windows.map((i) => new s3(i.label, { skip: true }));
}
var P = ["tauri://created", "tauri://error"];
var u3 = class {
  constructor(e2) {
    this.label = e2, this.listeners = /* @__PURE__ */ Object.create(null);
  }
  async listen(e2, a2) {
    return this._handleTauriEvent(e2, a2) ? Promise.resolve(() => {
      let n = this.listeners[e2];
      n.splice(n.indexOf(a2), 1);
    }) : o(e2, this.label, a2);
  }
  async once(e2, a2) {
    return this._handleTauriEvent(e2, a2) ? Promise.resolve(() => {
      let n = this.listeners[e2];
      n.splice(n.indexOf(a2), 1);
    }) : u2(e2, this.label, a2);
  }
  async emit(e2, a2) {
    if (P.includes(e2)) {
      for (let n of this.listeners[e2] || [])
        n({ event: e2, id: -1, windowLabel: this.label, payload: a2 });
      return Promise.resolve();
    }
    return m(e2, this.label, a2);
  }
  _handleTauriEvent(e2, a2) {
    return P.includes(e2) ? (e2 in this.listeners ? this.listeners[e2].push(a2) : this.listeners[e2] = [a2], true) : false;
  }
};
var h = class extends u3 {
  async scaleFactor() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "scaleFactor" } } } });
  }
  async innerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerPosition" } } } }).then(({ x: e2, y: a2 }) => new o2(e2, a2));
  }
  async outerPosition() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerPosition" } } } }).then(({ x: e2, y: a2 }) => new o2(e2, a2));
  }
  async innerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "innerSize" } } } }).then(({ width: e2, height: a2 }) => new l(e2, a2));
  }
  async outerSize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "outerSize" } } } }).then(({ width: e2, height: a2 }) => new l(e2, a2));
  }
  async isFullscreen() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isFullscreen" } } } });
  }
  async isMaximized() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isMaximized" } } } });
  }
  async isDecorated() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isDecorated" } } } });
  }
  async isResizable() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isResizable" } } } });
  }
  async isVisible() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "isVisible" } } } });
  }
  async theme() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "theme" } } } });
  }
  async center() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "center" } } } });
  }
  async requestUserAttention(e2) {
    let a2 = null;
    return e2 && (e2 === 1 ? a2 = { type: "Critical" } : a2 = { type: "Informational" }), a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "requestUserAttention", payload: a2 } } } });
  }
  async setResizable(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setResizable", payload: e2 } } } });
  }
  async setTitle(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setTitle", payload: e2 } } } });
  }
  async maximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "maximize" } } } });
  }
  async unmaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unmaximize" } } } });
  }
  async toggleMaximize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "toggleMaximize" } } } });
  }
  async minimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "minimize" } } } });
  }
  async unminimize() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "unminimize" } } } });
  }
  async show() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "show" } } } });
  }
  async hide() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "hide" } } } });
  }
  async close() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "close" } } } });
  }
  async setDecorations(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setDecorations", payload: e2 } } } });
  }
  async setAlwaysOnTop(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setAlwaysOnTop", payload: e2 } } } });
  }
  async setSize(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSize", payload: { type: e2.type, data: { width: e2.width, height: e2.height } } } } } });
  }
  async setMinSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMinSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setMaxSize(e2) {
    if (e2 && e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `size` argument must be either a LogicalSize or a PhysicalSize instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setMaxSize", payload: e2 ? { type: e2.type, data: { width: e2.width, height: e2.height } } : null } } } });
  }
  async setPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setFullscreen(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFullscreen", payload: e2 } } } });
  }
  async setFocus() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setFocus" } } } });
  }
  async setIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIcon", payload: { icon: typeof e2 == "string" ? e2 : Array.from(e2) } } } } });
  }
  async setSkipTaskbar(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setSkipTaskbar", payload: e2 } } } });
  }
  async setCursorGrab(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorGrab", payload: e2 } } } });
  }
  async setCursorVisible(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorVisible", payload: e2 } } } });
  }
  async setCursorIcon(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorIcon", payload: e2 } } } });
  }
  async setCursorPosition(e2) {
    if (!e2 || e2.type !== "Logical" && e2.type !== "Physical")
      throw new Error("the `position` argument must be either a LogicalPosition or a PhysicalPosition instance");
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setCursorPosition", payload: { type: e2.type, data: { x: e2.x, y: e2.y } } } } } });
  }
  async setIgnoreCursorEvents(e2) {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "setIgnoreCursorEvents", payload: e2 } } } });
  }
  async startDragging() {
    return a({ __tauriModule: "Window", message: { cmd: "manage", data: { label: this.label, cmd: { type: "startDragging" } } } });
  }
  async onResized(e2) {
    return this.listen("tauri://resize", e2);
  }
  async onMoved(e2) {
    return this.listen("tauri://move", e2);
  }
  async onCloseRequested(e2) {
    return this.listen("tauri://close-requested", (a2) => {
      let n = new y(a2);
      Promise.resolve(e2(n)).then(() => {
        if (!n.isPreventDefault())
          return this.close();
      });
    });
  }
  async onFocusChanged(e2) {
    let a2 = await this.listen("tauri://focus", (d2) => {
      e2({ ...d2, payload: true });
    }), n = await this.listen("tauri://blur", (d2) => {
      e2({ ...d2, payload: false });
    });
    return () => {
      a2(), n();
    };
  }
  async onScaleChanged(e2) {
    return this.listen("tauri://scale-change", e2);
  }
  async onMenuClicked(e2) {
    return this.listen("tauri://menu", e2);
  }
  async onFileDropEvent(e2) {
    let a2 = await this.listen("tauri://file-drop", (r) => {
      e2({ ...r, payload: { type: "drop", paths: r.payload } });
    }), n = await this.listen("tauri://file-drop-hover", (r) => {
      e2({ ...r, payload: { type: "hover", paths: r.payload } });
    }), d2 = await this.listen("tauri://file-drop-cancelled", (r) => {
      e2({ ...r, payload: { type: "cancel" } });
    });
    return () => {
      a2(), n(), d2();
    };
  }
  async onThemeChanged(e2) {
    return this.listen("tauri://theme-changed", e2);
  }
};
var y = class {
  constructor(e2) {
    this._preventDefault = false;
    this.event = e2.event, this.windowLabel = e2.windowLabel, this.id = e2.id;
  }
  preventDefault() {
    this._preventDefault = true;
  }
  isPreventDefault() {
    return this._preventDefault;
  }
};
var s3 = class extends h {
  constructor(e2, a2 = {}) {
    super(e2), a2 != null && a2.skip || a({ __tauriModule: "Window", message: { cmd: "createWebview", data: { options: { label: e2, ...a2 } } } }).then(async () => this.emit("tauri://created")).catch(async (n) => this.emit("tauri://error", n));
  }
  static getByLabel(e2) {
    return M().some((a2) => a2.label === e2) ? new s3(e2, { skip: true }) : null;
  }
};
var b;
"__TAURI_METADATA__" in window ? b = new s3(window.__TAURI_METADATA__.__currentWindow.label, { skip: true }) : (console.warn(`Could not find "window.__TAURI_METADATA__". The "appWindow" value will reference the "main" window label.
Note that this is not an issue if running this frontend on a browser instead of a Tauri window.`), b = new s3("main", { skip: true }));
function g(i) {
  return i === null ? null : { name: i.name, scaleFactor: i.scaleFactor, position: new o2(i.position.x, i.position.y), size: new l(i.size.width, i.size.height) };
}
async function E2() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "currentMonitor" } } } }).then(g);
}
async function z() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "primaryMonitor" } } } }).then(g);
}
async function T() {
  return a({ __tauriModule: "Window", message: { cmd: "manage", data: { cmd: { type: "availableMonitors" } } } }).then((i) => i.map(g));
}

// ui/lib/keyboard.js
function makeKeyDownMatcher(sc, cb) {
  return makeKeyMatcher("keydown", sc, cb);
}
function makeKeyMatcher(type, sc, cb) {
  const parts = sc.split(/[+-]/);
  const key = parts.pop().toLowerCase();
  const modifiers = {
    shiftKey: false,
    ctrlKey: false,
    metaKey: false,
    altKey: false
  };
  parts.forEach((p2) => {
    p2 = p2.toLowerCase();
    if (p2 === "cmd")
      p2 = "meta";
    const mod = `${p2}Key`;
    if (typeof modifiers[mod] !== "boolean")
      console.warn(`Unknown command modifier ${p2}.`);
    modifiers[mod] = true;
  });
  return (evt) => {
    if (type !== evt.type)
      return;
    if (key.toLowerCase() !== evt.key)
      return;
    let badMod = false;
    Object.keys(modifiers).forEach((mod) => {
      if (evt[mod] !== modifiers[mod])
        badMod = true;
    });
    if (badMod)
      return;
    cb();
  };
}

// ui/lib/debug.js
function registerReload() {
  window.addEventListener("keydown", makeKeyDownMatcher("cmd+R", reload));
  window.addEventListener("keydown", makeKeyDownMatcher("ctrl+R", reload));
}
function reload() {
  console.warn("RELOAD");
  window.location.reload();
}

// node_modules/nanoid/index.browser.js
var random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
var customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id = "";
    while (true) {
      let bytes = getRandom(step);
      let j = step;
      while (j--) {
        id += alphabet[bytes[j] & mask] || "";
        if (id.length === size)
          return id;
      }
    }
  };
};
var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);

// ui/lib/contexts.js
var import_lowercase = __toESM(require_lowercase(), 1);

// node_modules/tauri-plugin-store-api/dist-js/index.mjs
var Store = class {
  constructor(path) {
    this.path = path;
  }
  /**
   * Inserts a key-value pair into the store.
   *
   * @param key
   * @param value
   * @returns
   */
  async set(key, value) {
    return await c("plugin:store|set", {
      path: this.path,
      key,
      value
    });
  }
  /**
   * Returns the value for the given `key` or `null` the key does not exist.
   *
   * @param key
   * @returns
   */
  async get(key) {
    return await c("plugin:store|get", {
      path: this.path,
      key
    });
  }
  /**
   * Returns `true` if the given `key` exists in the store.
   *
   * @param key
   * @returns
   */
  async has(key) {
    return await c("plugin:store|has", {
      path: this.path,
      key
    });
  }
  /**
   * Removes a key-value pair from the store.
   *
   * @param key
   * @returns
   */
  async delete(key) {
    return await c("plugin:store|delete", {
      path: this.path,
      key
    });
  }
  /**
   * Clears the store, removing all key-value pairs.
   *
   * Note: To clear the storage and reset it to it's `default` value, use `reset` instead.
   * @returns
   */
  async clear() {
    return await c("plugin:store|clear", {
      path: this.path
    });
  }
  /**
   * Resets the store to it's `default` value.
   *
   * If no default value has been set, this method behaves identical to `clear`.
   * @returns
   */
  async reset() {
    return await c("plugin:store|reset", {
      path: this.path
    });
  }
  /**
   * Returns a list of all key in the store.
   *
   * @returns
   */
  async keys() {
    return await c("plugin:store|keys", {
      path: this.path
    });
  }
  /**
   * Returns a list of all values in the store.
   *
   * @returns
   */
  async values() {
    return await c("plugin:store|values", {
      path: this.path
    });
  }
  /**
   * Returns a list of all entries in the store.
   *
   * @returns
   */
  async entries() {
    return await c("plugin:store|entries", {
      path: this.path
    });
  }
  /**
   * Returns the number of key-value pairs in the store.
   *
   * @returns
   */
  async length() {
    return await c("plugin:store|length", {
      path: this.path
    });
  }
  /**
   * Attempts to load the on-disk state at the stores `path` into memory.
   *
   * This method is useful if the on-disk state was edited by the user and you want to synchronize the changes.
   *
   * Note: This method does not emit change events.
   * @returns
   */
  async load() {
    return await c("plugin:store|load", {
      path: this.path
    });
  }
  /**
   * Saves the store to disk at the stores `path`.
   *
   * As the store is only persisted to disk before the apps exit, changes might be lost in a crash.
   * This method lets you persist the store to disk whenever you deem necessary.
   * @returns
   */
  async save() {
    return await c("plugin:store|save", {
      path: this.path
    });
  }
  /**
   * Listen to changes on a store key.
   * @param key
   * @param cb
   * @returns A promise resolving to a function to unlisten to the event.
   */
  async onKeyChange(key, cb) {
    return await b.listen("store://change", (event) => {
      if (event.payload.path === this.path && event.payload.key === key) {
        cb(event.payload.value);
      }
    });
  }
  /**
   * Listen to changes on the store.
   * @param cb
   * @returns A promise resolving to a function to unlisten to the event.
   */
  async onChange(cb) {
    return await b.listen("store://change", (event) => {
      if (event.payload.path === this.path) {
        cb(event.payload.key, event.payload.value);
      }
    });
  }
};

// ui/lib/contexts.js
var CTX_LIST = "$ctx-list";
var nanoid = customAlphabet(import_lowercase.default);
var store = new Store("contexts.store");
var contexts = await store.get(CTX_LIST);
if (!contexts) {
  contexts = [];
  await store.set(CTX_LIST, []);
}

// ui/cosmopolis.js
b.maximize();
registerReload();
var h1 = document.querySelector("h1");
h1.style.color = "orange";
var p = document.createElement("p");
p.textContent = await c("welcome", { name: "cosmopolis" });
h1.after(p);
